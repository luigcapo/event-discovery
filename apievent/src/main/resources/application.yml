spring:
  profiles:
    active: dev
  datasource:
      # j'utilise la syntaxe ${NOM_DE_LA_VARIABLE:valeur_par_defaut}
      url: jdbc:postgresql://postgres:5432/${DB_NAME:event}
      username: ${DB_USER:postgres}
      password: ${DB_PASSWORD:monchichi}
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: true
        format_sql: true
  flyway:
    enabled: true
    locations:
      - classpath:db/migration/old
      - classpath:db/migration/new
    user: ${DB_USER:postgres}
    password: ${DB_PASSWORD:monchichi}
  application:
    name: api-event
  kafka:
    bootstrap-servers: kafka1:9092,kafka2:9092,kafka3:9092
    producer:
      retries: 3
      acks: all
      properties:
        enable.idempotence: true
        retry.backoff.ms: 2000 # Temps d'attente entre les tentatives de réessai


management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0 # 100% des requêtes sont échantillonnées
  # Configuration unifiée et moderne pour OTLP
  otlp:
    tracing:
      endpoint: http://jaeger:4318/v1/traces
logging:
    level:
        org.hibernate.SQL: INFO
        org.hibernate.type.descriptor.sql.BasicBinder: ERROR
        org.hibernate.type.descriptor.sql.BasicExtractor: ERROR
        org.springdoc: INFO
        level.io.opentelemetry.exporter.otlp: INFO
api:
  error:
    include-debug-message: true
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
app:
  kafka:
    topic:
      eventCreated: event.created
      eventCreatedImpaired: event.created.impair